#include <bits/stdc++.h>
using namespace std;

void solve(map<int, list<int>> m1, map<int, bool> v, int &n)
{
    for (auto it : m1)
    {
        stack<int> s;
        if (v[it.first] == 0)
        {
            s.push(it.first);
            v[it.first]=1;
            while(!s.empty())
            {
                int num=s.top();
                s.pop();
                for(auto i:m1[num])
                {
                    if(v[i]==0)
                    {
                        s.push(i); v[i]=1;
                    }
                }
            }
            n++;
        }
    }
}

int main()
{
    vector<vector<int>> v1 = {{1, 2}, {1, 3}, {3, 4}, {4, 2}, {5, 7}, {7, 6}, {6, 5}, {8, 9}, {0, 0}};
    int n; cout<<"Enter number of edges : ";
    cin>>n;
    map<int, list<int>> m1;
    map<int, bool> v;
    for (int i = 0; i < n; i++)
    {
        int a,b; cin>>a>>b;
        m1[a].push_back(b);
        m1[b].push_back(a);
        v[a] = false;
    }
    for (auto it : m1)
    {
        cout << it.first << " : ";
        for (auto i : it.second)
        {
            cout << i << " ";
        }
        cout << "\n";
    }
    int num = 0;
    solve(m1, v, num);
    cout <<"Number of conected graphs are : " <<num << endl;
}
